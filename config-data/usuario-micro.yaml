server:
  port: ${PORT:${SERVER_PORT:0}}
eureka:
  client:
    fetch-registry: true #Con esto indicamos que se van a registrar en el servidor eureka, port: ${PORT:${SERVER_PORT:0}} ES PARA QUE ME DE UN PUERTO EL PRIMERO QUE ENCUENTRE
    register-with-eureka: true #Y que este es un cliente de eureka
    service-url:
      defaultZone: http://localhost:8761/eureka
    enabled: true
  instance:
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}} #instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}} para que te genere un puerto aleatorio
resilience4j.circuitbreaker:
    instances:
        carrosCB:
            registerHealthIndicator: true
            slidingWindowSize: 10
            permittedNumberOfCallsInHalfOpenState: 3
            slidingWindowType: TIME_BASED
            minimumNumberOfCalls: 4
            waitDurationInOpenState: 5s
            failureRateThreshold: 50
            eventConsumerBufferSize: 10
        motosCB:
            registerHealthIndicator: true
            slidingWindowSize: 10
            permittedNumberOfCallsInHalfOpenState: 3
            slidingWindowType: TIME_BASED
            minimumNumberOfCalls: 4
            waitDurationInOpenState: 5s
            failureRateThreshold: 50
            eventConsumerBufferSize: 10
        todosCB: #CB (Circuit Breaker)
            registerHealthIndicator: true
            slidingWindowSize: 10
            permittedNumberOfCallsInHalfOpenState: 3
            slidingWindowType: TIME_BASED
            minimumNumberOfCalls: 4
            waitDurationInOpenState: 5s
            failureRateThreshold: 50
            eventConsumerBufferSize: 10
management: #Habilito el rastreo de la aplicacion
  tracing:
    enabled: true
spring: #El lugar donde se enviaran los datos de rastreo
  zipkin:
    base-url: http://localhost:9411
    sender: #El tipo de remitente del envio de datos de rastreo
      type: web